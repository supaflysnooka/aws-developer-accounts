#!/bin/bash

# Documentation Generator Script
# Automatically generates documentation for Terraform modules

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

PROJECT_ROOT=$(git rev-parse --show-toplevel 2>/dev/null || pwd)

print_header() {
    echo -e "${BLUE}================================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================================${NC}"
}

print_success() { echo -e "${GREEN}✓ $1${NC}"; }
print_warning() { echo -e "${YELLOW}⚠ $1${NC}"; }
print_error() { echo -e "${RED}✗ $1${NC}"; }
print_info() { echo -e "${BLUE}ℹ $1${NC}"; }

extract_variables() {
    local module_path=$1
    local variables_file="$module_path/variables.tf"
    
    if [ ! -f "$variables_file" ]; then
        echo "No variables"
        return
    fi
    
    echo "| Variable | Type | Default | Description |"
    echo "|----------|------|---------|-------------|"
    
    awk '
    /^variable/ {
        var_name = $2
        gsub(/"/, "", var_name)
        description = ""
        type = ""
        default_val = ""
        in_variable = 1
    }
    in_variable && /description/ {
        match($0, /"([^"]*)"/, arr)
        description = arr[1]
    }
    in_variable && /type\s*=/ {
        match($0, /=\s*(.*)/, arr)
        type = arr[1]
        gsub(/\s/, "", type)
    }
    in_variable && /default\s*=/ {
        if ($0 ~ /default\s*=\s*"/) {
            match($0, /"([^"]*)"/, arr)
            default_val = arr[1]
        } else if ($0 ~ /default\s*=\s*[0-9]/) {
            match($0, /=\s*([0-9]+)/, arr)
            default_val = arr[1]
        } else if ($0 ~ /default\s*=\s*(true|false)/) {
            match($0, /=\s*(true|false)/, arr)
            default_val = arr[1]
        } else {
            default_val = "-"
        }
    }
    in_variable && /^}/ {
        if (var_name != "") {
            printf "| `%s` | %s | %s | %s |\n", var_name, type, default_val, description
        }
        in_variable = 0
    }
    ' "$variables_file"
}

extract_outputs() {
    local module_path=$1
    local outputs_file="$module_path/outputs.tf"
    
    if [ ! -f "$outputs_file" ]; then
        echo "No outputs"
        return
    fi
    
    echo "| Output | Description |"
    echo "|--------|-------------|"
    
    awk '
    /^output/ {
        output_name = $2
        gsub(/"/, "", output_name)
        description = ""
        in_output = 1
    }
    in_output && /description/ {
        match($0, /"([^"]*)"/, arr)
        description = arr[1]
    }
    in_output && /^}/ {
        if (output_name != "") {
            printf "| `%s` | %s |\n", output_name, description
        }
        in_output = 0
    }
    ' "$outputs_file"
}

generate_module_readme() {
    local module_path=$1
    local module_name=$(basename "$module_path")
    local readme_file="$module_path/README.md"
    
    print_info "Generating README for: $module_name"
    
    # Check if main.tf exists
    if [ ! -f "$module_path/main.tf" ]; then
        print_warning "No main.tf found in $module_name"
        return
    fi
    
    # Backup existing README if it exists
    if [ -f "$readme_file" ]; then
        cp "$readme_file" "$readme_file.backup"
        print_info "Backed up existing README"
    fi
    
    cat > "$readme_file" <<EOF
# $(echo $module_name | sed 's/-/ /g' | sed 's/\b\(.\)/\u\1/g') Module

<!-- This file is auto-generated. Do not edit manually. -->
<!-- Last updated: $(date) -->

## Description

[Add module description here]

## Usage

\`\`\`hcl
module "$(echo $module_name | tr '-' '_')" {
  source = "../../modules/$module_name"
  
  # Add required variables here
}
\`\`\`

## Variables

$(extract_variables "$module_path")

## Outputs

$(extract_outputs "$module_path")

## Examples

### Basic Example

\`\`\`hcl
# Add basic example here
\`\`\`

### Advanced Example

\`\`\`hcl
# Add advanced example here
\`\`\`

## Requirements

| Name | Version |
|------|---------|
| terraform | >= 1.5.0 |
| aws | ~> 5.0 |

## Resources

<!-- Add list of resources created by this module -->

## Notes

<!-- Add any additional notes or warnings -->

---
Generated by: generate-docs.sh
EOF
    
    print_success "Generated: $readme_file"
}

generate_main_readme() {
    print_header "Updating Main README"
    
    local readme="$PROJECT_ROOT/README.md"
    
    # Extract modules list
    local modules=$(find "$PROJECT_ROOT/modules" -mindepth 2 -maxdepth 2 -type d | sort)
    
    # Create modules table
    local modules_table="| Module | Status | Description |\n|--------|--------|-------------|\n"
    
    for module_dir in $modules; do
        local module_name=$(basename "$module_dir")
        local category=$(basename "$(dirname "$module_dir")")
        local status="Complete"
        
        # Check if README exists
        if [ ! -f "$module_dir/README.md" ]; then
            status="Needs Docs"
        fi
        
        modules_table+="| $category/$module_name | $status | - |\n"
    done
    
    print_success "Main README structure generated"
    print_info "Review and update: $readme"
}

generate_changelog() {
    print_header "Generating CHANGELOG"
    
    local changelog="$PROJECT_ROOT/CHANGELOG.md"
    
    if [ -f "$changelog" ]; then
        print_info "CHANGELOG already exists"
        return
    fi
    
    cat > "$changelog" <<'EOF'
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]

### Added
- Initial project setup
- Core modules for AWS services
- Automation scripts

### Changed
- None

### Deprecated
- None

### Removed
- None

### Fixed
- None

### Security
- None

## [1.0.0] - $(date +%Y-%m-%d)

### Added
- Account factory module
- VPC networking module
- Security groups module
- ECS service module
- RDS database module
- S3 storage module
- ECR container registry module
- API Gateway module
- Secrets Manager module
- ALB module
- EC2 compute module

[Unreleased]: https://github.com/bose/aws-developer-accounts/compare/v1.0.0...HEAD
[1.0.0]: https://github.com/bose/aws-developer-accounts/releases/tag/v1.0.0
EOF
    
    print_success "Generated: $changelog"
}

generate_contributing_guide() {
    print_header "Generating CONTRIBUTING Guide"
    
    local contributing="$PROJECT_ROOT/CONTRIBUTING.md"
    
    if [ -f "$contributing" ]; then
        print_info "CONTRIBUTING.md already exists"
        return
    fi
    
    cat > "$contributing" <<'EOF'
# Contributing to AWS Developer Accounts

Thank you for considering contributing! This document outlines the process for contributing to this project.

## Getting Started

1. Fork the repository
2. Clone your fork: `git clone https://github.com/YOUR_USERNAME/aws-developer-accounts.git`
3. Create a branch: `git checkout -b feature/your-feature-name`
4. Make your changes
5. Run tests and validation
6. Commit your changes
7. Push to your fork
8. Create a Pull Request

## Development Setup

```bash
# Install dependencies
./scripts/setup/install-dependencies.sh

# Configure Git hooks
./scripts/setup/configure-git-hooks.sh

# Bootstrap Terraform
./scripts/setup/bootstrap-terraform.sh
```

## Code Standards

### Terraform

- Use `terraform fmt` for formatting
- All modules must have:
  - `main.tf` - Main configuration
  - `variables.tf` - Input variables
  - `outputs.tf` - Output values
  - `README.md` - Documentation
- Follow naming conventions:
  - Resources: `snake_case`
  - Variables: `snake_case`
  - Modules: `kebab-case`

### Documentation

- Every module must have a README with:
  - Description
  - Usage examples
  - Variables table
  - Outputs table
  - Requirements
- Use clear, concise language
- Include cost considerations where relevant

### Testing

- Test all changes locally before submitting PR
- Run validation: `./scripts/validation/validate-terraform.sh`
- Run security scan: `./scripts/validation/security-scan.sh`
- Check cost estimates: `./scripts/validation/cost-estimate.sh`

## Pull Request Process

1. Update documentation for any changed functionality
2. Add tests if applicable
3. Ensure all checks pass
4. Update CHANGELOG.md
5. Request review from maintainers

## Code Review Guidelines

- Be respectful and constructive
- Focus on the code, not the person
- Explain why, not just what
- Suggest improvements
- Approve when ready

## Module Development

### Creating a New Module

```bash
# Create module directory structure
mkdir -p modules/category/new-module
cd modules/category/new-module

# Create required files
touch main.tf variables.tf outputs.tf README.md

# Add module code
# ... implement your module

# Generate documentation
./scripts/utilities/generate-docs.sh

# Test the module
cd tests/unit/modules/new-module
terraform init
terraform plan
```

### Module Requirements

- All resources must be tagged
- Use consistent naming patterns
- Include cost optimization where possible
- Add security best practices
- Provide usage examples
- Document all variables and outputs

## Questions?

- Open an issue for bugs or feature requests
- Contact infrastructure-team@boseprofessional.com for questions
- Join #aws-developer-accounts Slack channel

## License

By contributing, you agree that your contributions will be licensed under the same license as the project.
EOF
    
    print_success "Generated: $contributing"
}

generate_module_index() {
    print_header "Generating Module Index"
    
    local index_file="$PROJECT_ROOT/docs/MODULE_INDEX.md"
    mkdir -p "$(dirname "$index_file")"
    
    cat > "$index_file" <<'EOF'
# Module Index

Complete index of all available Terraform modules.

## Networking

### VPC
**Path**: `modules/networking/vpc`  
**Purpose**: Complete VPC setup with public, private, and database subnets

### Security Groups
**Path**: `modules/networking/security-groups`  
**Purpose**: Pre-configured security group patterns

### Application Load Balancer
**Path**: `modules/networking/alb`  
**Purpose**: HTTP/HTTPS load balancing with SSL termination

## Compute

### EC2
**Path**: `modules/compute/ec2`  
**Purpose**: EC2 instances with IAM roles and monitoring

## Containers

### ECR
**Path**: `modules/containers/ecr`  
**Purpose**: Docker container registry with scanning

### ECS Service
**Path**: `modules/containers/ecs-service`  
**Purpose**: Fargate-based container orchestration

## Databases

### RDS PostgreSQL
**Path**: `modules/databases/rds`  
**Purpose**: Managed PostgreSQL database

## Storage

### S3
**Path**: `modules/storage/s3`  
**Purpose**: Object storage with lifecycle policies

## API

### API Gateway
**Path**: `modules/api/api-gateway`  
**Purpose**: REST/HTTP API management

## Security

### Secrets Manager
**Path**: `modules/security/secrets-manager`  
**Purpose**: Secure credential storage with rotation

## Account Management

### Account Factory
**Path**: `modules/account-factory`  
**Purpose**: Automated AWS account provisioning

---
Last updated: $(date)
EOF
    
    print_success "Generated: $index_file"
}

main() {
    print_header "Documentation Generator"
    
    echo ""
    echo "This will generate/update documentation for:"
    echo "  • Individual module READMEs"
    echo "  • Main README"
    echo "  • CHANGELOG"
    echo "  • CONTRIBUTING guide"
    echo "  • Module index"
    echo ""
    
    read -p "Continue? (y/n): " confirm

    if [ "$confirm" = "y" ]; then
        generate_module_readme "$module_dir"
    else
        print_info "Skipping module READMEs"
    fi
    
    # Generate main documentation
    generate_main_readme
    generate_module_index
    generate_changelog
    generate_contributing_guide
    
    # Summary
    print_header "Documentation Generation Complete"
    
    echo ""
    print_success "Documentation has been generated/updated!"
    echo ""
    print_info "Generated files:"
    echo "  • Module READMEs: modules/*/README.md"
    echo "  • Module Index: docs/MODULE_INDEX.md"
    echo "  • Changelog: CHANGELOG.md"
    echo "  • Contributing Guide: CONTRIBUTING.md"
    echo ""
    print_info "Review and commit the changes"
}

main "$@"
